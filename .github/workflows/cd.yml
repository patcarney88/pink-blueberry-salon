name: CD Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: pink-blueberry-salon
  ECS_SERVICE: pink-blueberry-service
  ECS_CLUSTER: pink-blueberry-cluster

jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to ${{ needs.prepare-deployment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    environment:
      name: ${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ steps.get-url.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-get-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.prepare-deployment.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition pink-blueberry-task \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: pink-blueberry-container
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.prepare-deployment.outputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}-${{ needs.prepare-deployment.outputs.environment }}
          cluster: ${{ env.ECS_CLUSTER }}-${{ needs.prepare-deployment.outputs.environment }}
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }}-${{ needs.prepare-deployment.outputs.environment }} \
            --task-definition pink-blueberry-migration-task \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"

      - name: Verify deployment
        run: |
          sleep 30
          HEALTH_CHECK_URL="https://${{ needs.prepare-deployment.outputs.environment }}.pink-blueberry.com/api/health"
          for i in {1..10}; do
            if curl -f $HEALTH_CHECK_URL; then
              echo "Deployment successful!"
              break
            fi
            echo "Waiting for deployment to be ready... (attempt $i/10)"
            sleep 10
          done

      - name: Get deployment URL
        id: get-url
        run: |
          if [ "${{ needs.prepare-deployment.outputs.environment }}" == "production" ]; then
            echo "url=https://pink-blueberry.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://${{ needs.prepare-deployment.outputs.environment }}.pink-blueberry.com" >> $GITHUB_OUTPUT
          fi

      - name: Invalidate CloudFront cache
        if: needs.prepare-deployment.outputs.environment == 'production'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy, prepare-deployment]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run smoke tests
        env:
          BASE_URL: https://${{ needs.prepare-deployment.outputs.environment }}.pink-blueberry.com
        run: npm run test:smoke

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-results/

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests, prepare-deployment]
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback ECS service
        run: |
          PREVIOUS_TASK_DEFINITION=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }}-${{ needs.prepare-deployment.outputs.environment }} \
            --services ${{ env.ECS_SERVICE }}-${{ needs.prepare-deployment.outputs.environment }} \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          if [ "$PREVIOUS_TASK_DEFINITION" != "None" ]; then
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }}-${{ needs.prepare-deployment.outputs.environment }} \
              --service ${{ env.ECS_SERVICE }}-${{ needs.prepare-deployment.outputs.environment }} \
              --task-definition $PREVIOUS_TASK_DEFINITION \
              --force-new-deployment

            echo "Rolled back to previous task definition: $PREVIOUS_TASK_DEFINITION"
          else
            echo "No previous deployment found for rollback"
          fi

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Deployment to ${{ needs.prepare-deployment.outputs.environment }} failed and was rolled back.'
            })

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests, prepare-deployment]
    if: success()
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Deployment Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Deployment Successful ✅"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ needs.prepare-deployment.outputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ needs.prepare-deployment.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*URL:*\n<https://${{ needs.prepare-deployment.outputs.environment }}.pink-blueberry.com>"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}