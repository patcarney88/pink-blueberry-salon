// Pink Blueberry Salon - Multi-tenant Database Schema
// Optimized for 100,000+ concurrent users with PostgreSQL

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearchPostgres"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pg_trgm, btree_gin, btree_gist]
}

// ==========================================
// ENUMS
// ==========================================

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  SALON_MANAGER
  BRANCH_MANAGER
  STAFF
  RECEPTIONIST
  CUSTOMER
}

enum PermissionType {
  READ
  WRITE
  DELETE
  MANAGE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  GIFT_CARD
  LOYALTY_POINTS
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  PROCESSING
  READY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum StaffStatus {
  ACTIVE
  ON_LEAVE
  SICK
  VACATION
  TRAINING
  TERMINATED
}

enum ServicePricingType {
  FIXED
  HOURLY
  CUSTOM
  PACKAGE
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  PACKAGE_DEAL
  LOYALTY_BONUS
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ConflictType {
  DOUBLE_BOOKING
  OVERLAPPING
  STAFF_UNAVAILABLE
  BRANCH_CLOSED
  SERVICE_UNAVAILABLE
}

enum ConflictResolutionStatus {
  PENDING
  RESOLVED
  IGNORED
  AUTO_RESOLVED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
  CUSTOM
}

enum RecurrenceType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum BookingRuleType {
  MIN_ADVANCE_TIME
  MAX_ADVANCE_TIME
  BLACKOUT_DATE
  PEAK_PRICING
  SERVICE_DURATION
  BUFFER_TIME
}

// ==========================================
// CORE MODELS - Multi-tenancy & Auth
// ==========================================

model Tenant {
  id                String    @id @default(uuid())
  name              String
  slug              String    @unique
  domain            String?   @unique
  logo              String?
  settings          Json      @default("{}")
  subscription_plan String    @default("basic")
  subscription_ends DateTime?
  is_active         Boolean   @default(true)
  max_branches      Int       @default(1)
  max_users         Int       @default(10)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  users             User[]
  salons            Salon[]
  roles             Role[]
  services          Service[]
  service_categories ServiceCategory[]
  customers         Customer[]
  products          Product[]
  campaigns         Campaign[]
  loyalty_programs  LoyaltyProgram[]

  // E-commerce relations
  product_categories ProductCategory[]
  ecommerce_products EcommerceProduct[]
  carts             Cart[]
  ecommerce_orders  EcommerceOrder[]
  subscriptions     Subscription[]
  product_bundles   ProductBundle[]
  product_recommendations ProductRecommendation[]
  analytics_snapshots AnalyticsSnapshot[]
  search_queries    SearchQuery[]

  @@index([slug])
  @@index([deleted_at])
  @@map("tenants")
}

model User {
  id                String    @id @default(uuid())
  tenant_id         String
  email             String
  password_hash     String
  first_name        String
  last_name         String
  phone             String?
  avatar            String?
  email_verified    Boolean   @default(false)
  phone_verified    Boolean   @default(false)
  two_factor_enabled Boolean  @default(false)
  two_factor_secret String?
  last_login        DateTime?
  is_active         Boolean   @default(true)
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user_roles        UserRoleAssignment[]
  permissions       UserPermission[]
  staff_profiles    Staff[]
  customer_profile  Customer?
  created_appointments Appointment[] @relation("CreatedBy")
  updated_appointments Appointment[] @relation("UpdatedBy")
  notifications_sent Notification[] @relation("SentBy")
  notifications_received Notification[] @relation("ReceivedBy")
  audit_logs        AuditLog[]

  @@unique([tenant_id, email])
  @@index([tenant_id, deleted_at])
  @@index([email])
  @@map("users")
}

model Role {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  description       String?
  is_system         Boolean   @default(false)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  permissions       RolePermission[]
  user_roles        UserRoleAssignment[]

  @@unique([tenant_id, name])
  @@index([tenant_id, deleted_at])
  @@map("roles")
}

model Permission {
  id                String    @id @default(uuid())
  resource          String
  action            PermissionType
  description       String?

  // Relations
  role_permissions  RolePermission[]
  user_permissions  UserPermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRoleAssignment {
  id                String    @id @default(uuid())
  user_id           String
  role_id           String
  granted_at        DateTime  @default(now())
  granted_by        String?
  expires_at        DateTime?

  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role              Role      @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@index([user_id])
  @@index([role_id])
  @@map("user_roles")
}

model RolePermission {
  id                String    @id @default(uuid())
  role_id           String
  permission_id     String

  // Relations
  role              Role      @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission        Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model UserPermission {
  id                String    @id @default(uuid())
  user_id           String
  permission_id     String
  granted_at        DateTime  @default(now())
  granted_by        String?
  expires_at        DateTime?

  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission        Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([user_id, permission_id])
  @@map("user_permissions")
}

// ==========================================
// BUSINESS MODELS - Salon & Services
// ==========================================

model Salon {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  description       String?
  logo              String?
  website           String?
  email             String?
  phone             String?
  tax_id            String?
  currency          String    @default("USD")
  timezone          String    @default("UTC")
  settings          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  branches          Branch[]

  @@unique([tenant_id, name])
  @@index([tenant_id, deleted_at])
  @@map("salons")
}

model Branch {
  id                String    @id @default(uuid())
  salon_id          String
  name              String
  slug              String
  address           String
  city              String
  state             String?
  country           String
  postal_code       String?
  latitude          Float?
  longitude         Float?
  phone             String
  email             String?
  opening_time      String    @default("09:00")
  closing_time      String    @default("18:00")
  time_slot_duration Int      @default(30) // in minutes
  max_advance_booking Int     @default(30) // in days
  cancellation_hours Int      @default(24) // hours before appointment
  is_active         Boolean   @default(true)
  settings          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  salon             Salon     @relation(fields: [salon_id], references: [id], onDelete: Cascade)
  staff             Staff[]
  appointments      Appointment[]
  schedules         Schedule[]
  inventory         Inventory[]
  reviews           Review[]
  working_hours     WorkingHours[]
  booking_rules     BookingRule[]
  recurring_templates RecurringAppointmentTemplate[]
  waitlist_entries  WaitlistEntry[]
  availability_overrides AvailabilityOverride[]

  @@unique([salon_id, slug])
  @@index([salon_id, deleted_at])
  @@index([latitude, longitude])
  @@map("branches")
}

model WorkingHours {
  id                String    @id @default(uuid())
  branch_id         String
  day_of_week       DayOfWeek
  opening_time      String
  closing_time      String
  is_closed         Boolean   @default(false)
  break_start       String?
  break_end         String?

  // Relations
  branch            Branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)

  @@unique([branch_id, day_of_week])
  @@map("working_hours")
}

model ServiceCategory {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  slug              String
  description       String?
  image             String?
  display_order     Int       @default(0)
  is_active         Boolean   @default(true)
  parent_id         String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  services          Service[]
  parent            ServiceCategory? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children          ServiceCategory[] @relation("CategoryHierarchy")

  @@unique([tenant_id, slug])
  @@index([tenant_id, deleted_at])
  @@index([parent_id])
  @@map("service_categories")
}

model Service {
  id                String    @id @default(uuid())
  tenant_id         String
  category_id       String
  name              String
  slug              String
  description       String?
  duration          Int       // in minutes
  price             Decimal   @db.Decimal(10, 2)
  pricing_type      ServicePricingType @default(FIXED)
  currency          String    @default("USD")
  image             String?
  requires_deposit  Boolean   @default(false)
  deposit_amount    Decimal?  @db.Decimal(10, 2)
  max_attendees     Int       @default(1)
  buffer_time       Int       @default(0) // cleanup time in minutes
  is_active         Boolean   @default(true)
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  category          ServiceCategory @relation(fields: [category_id], references: [id])
  appointment_services AppointmentService[]
  staff_services    StaffService[]
  service_add_ons   ServiceAddOn[]
  promotions        PromotionService[]
  waitlist_entries  WaitlistEntry[]

  @@unique([tenant_id, slug])
  @@index([tenant_id, category_id, deleted_at])
  @@index([category_id])
  @@map("services")
}

model ServiceAddOn {
  id                String    @id @default(uuid())
  service_id        String
  name              String
  price             Decimal   @db.Decimal(10, 2)
  duration          Int       @default(0) // additional minutes

  // Relations
  service           Service   @relation(fields: [service_id], references: [id], onDelete: Cascade)
  appointment_add_ons AppointmentAddOn[]

  @@map("service_add_ons")
}

// ==========================================
// PEOPLE MODELS - Customers & Staff
// ==========================================

model Customer {
  id                String    @id @default(uuid())
  tenant_id         String
  user_id           String?   @unique
  email             String
  first_name        String
  last_name         String
  phone             String?
  date_of_birth     DateTime?
  gender            String?
  address           String?
  city              String?
  state             String?
  country           String?
  postal_code       String?
  preferred_branch_id String?
  preferred_staff_id String?
  notes             String?
  tags              String[]
  is_vip            Boolean   @default(false)
  accepts_marketing Boolean   @default(true)
  referral_source   String?
  referral_code     String?   @unique
  lifetime_value    Decimal   @default(0) @db.Decimal(10, 2)
  total_visits      Int       @default(0)
  last_visit        DateTime?
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  appointments      Appointment[]
  orders            Order[]
  reviews           Review[]
  loyalty_points    LoyaltyPoints[]
  loyalty_transactions LoyaltyTransaction[]
  notifications     Notification[]
  recurring_templates RecurringAppointmentTemplate[]
  waitlist_entries  WaitlistEntry[]

  // E-commerce relations
  carts             Cart[]
  ecommerce_orders  EcommerceOrder[]
  subscriptions     Subscription[]
  product_reviews   ProductReview[]
  product_recommendations ProductRecommendation[]
  product_views     ProductView[]
  search_queries    SearchQuery[]

  @@unique([tenant_id, email])
  @@index([tenant_id, deleted_at])
  @@index([email])
  @@index([phone])
  @@index([referral_code])
  @@map("customers")
}

model Staff {
  id                String    @id @default(uuid())
  user_id           String
  branch_id         String
  employee_id       String?
  title             String?
  bio               String?
  specializations   String[]
  commission_rate   Decimal?  @db.Decimal(5, 2) // percentage
  status            StaffStatus @default(ACTIVE)
  hire_date         DateTime?
  termination_date  DateTime?
  color_code        String?   // for calendar display
  booking_enabled   Boolean   @default(true)
  online_booking    Boolean   @default(true)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  branch            Branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  schedules         Schedule[]
  staff_services    StaffService[]
  time_off_requests TimeOffRequest[]
  booking_rules     BookingRule[]
  calendar_syncs    CalendarSync[]
  recurring_templates RecurringAppointmentTemplate[]
  waitlist_entries  WaitlistEntry[]
  availability_overrides AvailabilityOverride[]

  @@unique([branch_id, employee_id])
  @@index([user_id])
  @@index([branch_id, deleted_at])
  @@map("staff")
}

model StaffService {
  id                String    @id @default(uuid())
  staff_id          String
  service_id        String
  duration_override Int?      // override default service duration
  price_override    Decimal?  @db.Decimal(10, 2)
  is_available      Boolean   @default(true)

  // Relations
  staff             Staff     @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  service           Service   @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([staff_id, service_id])
  @@map("staff_services")
}

// ==========================================
// SCHEDULING MODELS
// ==========================================

model Schedule {
  id                String    @id @default(uuid())
  staff_id          String
  branch_id         String
  date              DateTime  @db.Date
  start_time        String
  end_time          String
  break_start       String?
  break_end         String?
  is_available      Boolean   @default(true)

  // Relations
  staff             Staff     @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  branch            Branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  time_slots        TimeSlot[]

  @@unique([staff_id, date])
  @@index([branch_id, date])
  @@index([staff_id, date])
  @@map("schedules")
}

model TimeSlot {
  id                String    @id @default(uuid())
  schedule_id       String
  start_time        DateTime
  end_time          DateTime
  is_available      Boolean   @default(true)
  is_break          Boolean   @default(false)
  appointment_id    String?

  // Relations
  schedule          Schedule  @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  appointment       Appointment? @relation(fields: [appointment_id], references: [id], onDelete: SetNull)

  @@index([schedule_id, start_time])
  @@index([appointment_id])
  @@map("time_slots")
}

model TimeOffRequest {
  id                String    @id @default(uuid())
  staff_id          String
  start_date        DateTime  @db.Date
  end_date          DateTime  @db.Date
  reason            String?
  status            String    @default("PENDING") // PENDING, APPROVED, REJECTED
  approved_by       String?
  approved_at       DateTime?
  notes             String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  staff             Staff     @relation(fields: [staff_id], references: [id], onDelete: Cascade)

  @@index([staff_id, start_date, end_date])
  @@map("time_off_requests")
}

// ==========================================
// APPOINTMENT MODELS
// ==========================================

model Appointment {
  id                String    @id @default(uuid())
  branch_id         String
  customer_id       String
  staff_id          String
  appointment_date  DateTime
  start_time        DateTime
  end_time          DateTime
  status            AppointmentStatus @default(PENDING)
  total_duration    Int       // in minutes
  total_price       Decimal   @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  deposit_amount    Decimal   @default(0) @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  final_price       Decimal   @db.Decimal(10, 2)
  notes             String?
  internal_notes    String?
  confirmation_code String    @unique
  is_recurring      Boolean   @default(false)
  recurring_id      String?   // links recurring appointments
  source            String    @default("WALK_IN") // ONLINE, PHONE, WALK_IN
  cancellation_reason String?
  cancelled_at      DateTime?
  cancelled_by      String?
  no_show           Boolean   @default(false)
  reminder_sent     Boolean   @default(false)
  reminder_sent_at  DateTime?
  checked_in_at     DateTime?
  completed_at      DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  created_by        String?
  updated_at        DateTime  @updatedAt
  updated_by        String?
  deleted_at        DateTime?

  // Relations
  branch            Branch    @relation(fields: [branch_id], references: [id])
  customer          Customer  @relation(fields: [customer_id], references: [id])
  staff             Staff     @relation(fields: [staff_id], references: [id])
  services          AppointmentService[]
  add_ons           AppointmentAddOn[]
  payment           Payment?
  time_slots        TimeSlot[]
  created_by_user   User?     @relation("CreatedBy", fields: [created_by], references: [id])
  updated_by_user   User?     @relation("UpdatedBy", fields: [updated_by], references: [id])
  conflicts         BookingConflict[] @relation("ConflictAppointment")
  conflicting_with  BookingConflict[] @relation("ConflictingWith")
  reminders         AppointmentReminder[]

  @@index([branch_id, appointment_date])
  @@index([customer_id, appointment_date])
  @@index([staff_id, appointment_date])
  @@index([status, appointment_date])
  @@index([confirmation_code])
  @@index([recurring_id])
  @@index([deleted_at])
  @@map("appointments")
}

model AppointmentService {
  id                String    @id @default(uuid())
  appointment_id    String
  service_id        String
  price             Decimal   @db.Decimal(10, 2)
  duration          Int       // in minutes
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)

  // Relations
  appointment       Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  service           Service   @relation(fields: [service_id], references: [id])

  @@map("appointment_services")
}

model AppointmentAddOn {
  id                String    @id @default(uuid())
  appointment_id    String
  add_on_id         String
  price             Decimal   @db.Decimal(10, 2)

  // Relations
  appointment       Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  add_on            ServiceAddOn @relation(fields: [add_on_id], references: [id])

  @@map("appointment_add_ons")
}

// ==========================================
// INVENTORY & PRODUCTS
// ==========================================

model Product {
  id                String    @id @default(uuid())
  tenant_id         String
  sku               String
  barcode           String?
  name              String
  description       String?
  category          String?
  brand             String?
  supplier          String?
  cost_price        Decimal   @db.Decimal(10, 2)
  retail_price      Decimal   @db.Decimal(10, 2)
  wholesale_price   Decimal?  @db.Decimal(10, 2)
  min_stock_level   Int       @default(0)
  max_stock_level   Int?
  reorder_point     Int?
  reorder_quantity  Int?
  unit_of_measure   String    @default("UNIT")
  is_active         Boolean   @default(true)
  is_sellable       Boolean   @default(true)
  is_service_product Boolean  @default(false) // used in services
  track_inventory   Boolean   @default(true)
  image             String?
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  inventory         Inventory[]
  order_items       OrderItem[]

  @@unique([tenant_id, sku])
  @@index([tenant_id, deleted_at])
  @@index([barcode])
  @@map("products")
}

model Inventory {
  id                String    @id @default(uuid())
  branch_id         String
  product_id        String
  quantity_on_hand  Int       @default(0)
  quantity_reserved Int       @default(0)
  quantity_available Int      @default(0)
  last_restock_date DateTime?
  last_count_date   DateTime?
  location          String?   // shelf/bin location

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  branch            Branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  movements         InventoryMovement[]

  @@unique([branch_id, product_id])
  @@index([product_id])
  @@map("inventory")
}

model InventoryMovement {
  id                String    @id @default(uuid())
  inventory_id      String
  movement_type     String    // IN, OUT, ADJUSTMENT, TRANSFER
  quantity          Int
  reference_type    String?   // ORDER, APPOINTMENT, ADJUSTMENT, TRANSFER
  reference_id      String?
  reason            String?
  performed_by      String?

  // Audit fields
  created_at        DateTime  @default(now())

  // Relations
  inventory         Inventory @relation(fields: [inventory_id], references: [id], onDelete: Cascade)

  @@index([inventory_id, created_at])
  @@index([reference_type, reference_id])
  @@map("inventory_movements")
}

// ==========================================
// COMMERCE MODELS
// ==========================================

model Order {
  id                String    @id @default(uuid())
  customer_id       String
  order_number      String    @unique
  order_date        DateTime  @default(now())
  status            OrderStatus @default(PENDING)
  subtotal          Decimal   @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  shipping_amount   Decimal   @default(0) @db.Decimal(10, 2)
  total_amount      Decimal   @db.Decimal(10, 2)
  notes             String?
  shipping_address  Json?
  billing_address   Json?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  customer          Customer  @relation(fields: [customer_id], references: [id])
  items             OrderItem[]
  payment           Payment?

  @@index([customer_id, order_date])
  @@index([status, order_date])
  @@index([order_number])
  @@map("orders")
}

model OrderItem {
  id                String    @id @default(uuid())
  order_id          String
  product_id        String
  quantity          Int
  unit_price        Decimal   @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  total_amount      Decimal   @db.Decimal(10, 2)

  // Relations
  order             Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Payment {
  id                String    @id @default(uuid())
  appointment_id    String?   @unique
  order_id          String?   @unique
  transaction_id    String    @unique
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")
  status            PaymentStatus @default(PENDING)
  method            PaymentMethod
  gateway           String?   // stripe, paypal, square, etc.
  gateway_response  Json?
  reference_number  String?
  notes             String?
  paid_at           DateTime?
  failed_at         DateTime?
  refunded_at       DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  appointment       Appointment? @relation(fields: [appointment_id], references: [id])
  order             Order?    @relation(fields: [order_id], references: [id])
  invoice           Invoice?
  refunds           Refund[]

  @@index([status, created_at])
  @@index([transaction_id])
  @@map("payments")
}

model Invoice {
  id                String    @id @default(uuid())
  payment_id        String    @unique
  invoice_number    String    @unique
  invoice_date      DateTime  @default(now())
  due_date          DateTime?
  status            String    @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  subtotal          Decimal   @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  total_amount      Decimal   @db.Decimal(10, 2)
  notes             String?
  terms             String?
  footer            String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  payment           Payment   @relation(fields: [payment_id], references: [id])

  @@index([invoice_number])
  @@index([status, invoice_date])
  @@map("invoices")
}

model Refund {
  id                String    @id @default(uuid())
  payment_id        String
  refund_number     String    @unique
  amount            Decimal   @db.Decimal(10, 2)
  reason            String?
  status            String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  gateway_response  Json?
  processed_at      DateTime?
  processed_by      String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  payment           Payment   @relation(fields: [payment_id], references: [id])

  @@index([payment_id])
  @@index([refund_number])
  @@map("refunds")
}

// ==========================================
// ENGAGEMENT MODELS
// ==========================================

model Review {
  id                String    @id @default(uuid())
  branch_id         String
  customer_id       String
  appointment_id    String?
  rating            Int       // 1-5
  title             String?
  comment           String?
  is_verified       Boolean   @default(false)
  is_featured       Boolean   @default(false)
  response          String?
  responded_at      DateTime?
  responded_by      String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  branch            Branch    @relation(fields: [branch_id], references: [id])
  customer          Customer  @relation(fields: [customer_id], references: [id])

  @@index([branch_id, rating])
  @@index([customer_id])
  @@index([deleted_at])
  @@map("reviews")
}

model Campaign {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  description       String?
  type              String    // EMAIL, SMS, PUSH
  status            String    @default("DRAFT") // DRAFT, SCHEDULED, ACTIVE, PAUSED, COMPLETED
  target_audience   Json      // criteria for targeting
  content           Json      // email/sms content
  scheduled_at      DateTime?
  sent_at           DateTime?
  expires_at        DateTime?
  total_recipients  Int       @default(0)
  sent_count        Int       @default(0)
  open_count        Int       @default(0)
  click_count       Int       @default(0)
  conversion_count  Int       @default(0)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  promotions        Promotion[]

  @@index([tenant_id, status])
  @@index([deleted_at])
  @@map("campaigns")
}

model Promotion {
  id                String    @id @default(uuid())
  campaign_id       String?
  code              String    @unique
  name              String
  description       String?
  type              PromotionType
  value             Decimal   @db.Decimal(10, 2)
  min_purchase      Decimal?  @db.Decimal(10, 2)
  max_discount      Decimal?  @db.Decimal(10, 2)
  valid_from        DateTime
  valid_to          DateTime
  usage_limit       Int?
  usage_count       Int       @default(0)
  per_customer_limit Int?
  is_active         Boolean   @default(true)
  terms_conditions  String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  campaign          Campaign? @relation(fields: [campaign_id], references: [id])
  services          PromotionService[]
  usage_history     PromotionUsage[]

  @@index([code])
  @@index([valid_from, valid_to])
  @@index([deleted_at])
  @@map("promotions")
}

model PromotionService {
  id                String    @id @default(uuid())
  promotion_id      String
  service_id        String

  // Relations
  promotion         Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  service           Service   @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@unique([promotion_id, service_id])
  @@map("promotion_services")
}

model PromotionUsage {
  id                String    @id @default(uuid())
  promotion_id      String
  customer_id       String
  appointment_id    String?
  order_id          String?
  discount_amount   Decimal   @db.Decimal(10, 2)
  used_at           DateTime  @default(now())

  // Relations
  promotion         Promotion @relation(fields: [promotion_id], references: [id])

  @@index([promotion_id, customer_id])
  @@map("promotion_usage")
}

model LoyaltyProgram {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  description       String?
  points_per_dollar Decimal   @db.Decimal(5, 2)
  points_value      Decimal   @db.Decimal(10, 4) // dollar value per point
  tier_benefits     Json      // array of tier configurations
  is_active         Boolean   @default(true)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  loyalty_points    LoyaltyPoints[]

  @@index([tenant_id, deleted_at])
  @@map("loyalty_programs")
}

model LoyaltyPoints {
  id                String    @id @default(uuid())
  customer_id       String
  program_id        String
  current_points    Int       @default(0)
  lifetime_points   Int       @default(0)
  tier              String    @default("BRONZE")
  tier_expiry       DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  customer          Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  program           LoyaltyProgram @relation(fields: [program_id], references: [id])
  transactions      LoyaltyTransaction[]

  @@unique([customer_id, program_id])
  @@map("loyalty_points")
}

model LoyaltyTransaction {
  id                String    @id @default(uuid())
  points_id         String
  customer_id       String
  transaction_type  String    // EARNED, REDEEMED, EXPIRED, ADJUSTED
  points            Int
  balance_after     Int
  reference_type    String?   // APPOINTMENT, ORDER, MANUAL
  reference_id      String?
  description       String?
  expires_at        DateTime?

  // Audit fields
  created_at        DateTime  @default(now())

  // Relations
  loyalty_points    LoyaltyPoints @relation(fields: [points_id], references: [id])
  customer          Customer  @relation(fields: [customer_id], references: [id])

  @@index([points_id, created_at])
  @@index([customer_id, created_at])
  @@map("loyalty_transactions")
}

// ==========================================
// NOTIFICATION & AUDIT MODELS
// ==========================================

model Notification {
  id                String    @id @default(uuid())
  recipient_id      String
  sender_id         String?
  customer_id       String?
  type              NotificationType
  category          String    // APPOINTMENT, PROMOTION, SYSTEM, etc.
  subject           String?
  message           String
  data              Json?     // additional context
  is_read           Boolean   @default(false)
  read_at           DateTime?
  sent_at           DateTime  @default(now())
  scheduled_for     DateTime?
  status            String    @default("PENDING") // PENDING, SENT, FAILED
  error_message     String?
  retry_count       Int       @default(0)

  // Relations
  recipient         User      @relation("ReceivedBy", fields: [recipient_id], references: [id])
  sender            User?     @relation("SentBy", fields: [sender_id], references: [id])
  customer          Customer? @relation(fields: [customer_id], references: [id])

  @@index([recipient_id, is_read])
  @@index([customer_id])
  @@index([scheduled_for])
  @@map("notifications")
}

model AuditLog {
  id                String    @id @default(uuid())
  user_id           String?
  action            String    // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity_type       String    // Model name
  entity_id         String?
  changes           Json?     // before/after values
  ip_address        String?
  user_agent        String?
  metadata          Json?
  created_at        DateTime  @default(now())

  // Relations
  user              User?     @relation(fields: [user_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([user_id, created_at])
  @@index([created_at])
  @@map("audit_logs")
}

// ==========================================
// BOOKING ENGINE MODELS
// ==========================================

model BookingRule {
  id                String    @id @default(uuid())
  branch_id         String?   // null for global rules
  staff_id          String?   // null for branch/global rules
  rule_type         BookingRuleType
  is_active         Boolean   @default(true)
  priority          Int       @default(0) // higher priority rules override lower ones

  // Rule configuration
  min_advance_hours Int?      // minimum hours before appointment
  max_advance_days  Int?      // maximum days in advance
  buffer_minutes    Int?      // buffer time before/after appointments
  peak_price_multiplier Decimal? @db.Decimal(3, 2) // e.g., 1.5 for 50% increase

  // Date/time restrictions
  start_date        DateTime? @db.Date
  end_date          DateTime? @db.Date
  start_time        String?   // HH:MM format
  end_time          String?   // HH:MM format
  days_of_week      Int[]     // 0-6 for Sunday-Saturday

  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  branch            Branch?   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
  staff             Staff?    @relation(fields: [staff_id], references: [id], onDelete: Cascade)

  @@index([branch_id, rule_type, is_active])
  @@index([staff_id, rule_type, is_active])
  @@map("booking_rules")
}

model BookingConflict {
  id                String    @id @default(uuid())
  appointment_id    String
  conflict_type     ConflictType
  conflicting_appointment_id String?
  status            ConflictResolutionStatus @default(PENDING)

  // Conflict details
  detected_at       DateTime  @default(now())
  resolved_at       DateTime?
  resolved_by       String?
  resolution_notes  String?

  // Auto-resolution attempts
  auto_resolution_attempts Int @default(0)
  suggested_alternatives Json? // array of alternative time slots

  // Relations
  appointment       Appointment @relation("ConflictAppointment", fields: [appointment_id], references: [id], onDelete: Cascade)
  conflicting_appointment Appointment? @relation("ConflictingWith", fields: [conflicting_appointment_id], references: [id])

  @@index([appointment_id, status])
  @@index([detected_at, status])
  @@map("booking_conflicts")
}

model CalendarSync {
  id                String    @id @default(uuid())
  staff_id          String
  provider          CalendarProvider
  is_active         Boolean   @default(true)
  is_two_way        Boolean   @default(false) // bidirectional sync

  // OAuth credentials (encrypted)
  access_token      String?
  refresh_token     String?
  token_expiry      DateTime?

  // Calendar identifiers
  calendar_id       String
  external_calendar_id String? // ID in external system

  // Sync configuration
  sync_direction    String    @default("BOTH") // INBOUND, OUTBOUND, BOTH
  sync_frequency_minutes Int  @default(15)
  last_sync_at      DateTime?
  next_sync_at      DateTime?
  sync_errors       Int       @default(0)
  last_error        String?

  // Field mapping
  field_mapping     Json      @default("{}") // maps our fields to calendar fields

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  staff             Staff     @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  sync_logs         CalendarSyncLog[]

  @@unique([staff_id, provider])
  @@index([is_active, next_sync_at])
  @@map("calendar_syncs")
}

model CalendarSyncLog {
  id                String    @id @default(uuid())
  calendar_sync_id  String
  sync_type         String    // FULL, INCREMENTAL, CONFLICT_RESOLUTION
  started_at        DateTime  @default(now())
  completed_at      DateTime?
  success           Boolean   @default(false)

  // Sync statistics
  appointments_created Int     @default(0)
  appointments_updated Int     @default(0)
  appointments_deleted Int     @default(0)
  conflicts_detected Int      @default(0)
  conflicts_resolved Int      @default(0)

  error_message     String?
  debug_info        Json?

  // Relations
  calendar_sync     CalendarSync @relation(fields: [calendar_sync_id], references: [id], onDelete: Cascade)

  @@index([calendar_sync_id, started_at])
  @@map("calendar_sync_logs")
}

model RecurringAppointmentTemplate {
  id                String    @id @default(uuid())
  customer_id       String
  staff_id          String
  branch_id         String

  // Recurrence pattern
  recurrence_type   RecurrenceType
  recurrence_pattern Json     // RRULE string or custom pattern
  start_date        DateTime  @db.Date
  end_date          DateTime? @db.Date // null for no end
  occurrences_count Int?      // limit by number of occurrences

  // Template for appointments
  time_of_day       String    // HH:MM format
  duration_minutes  Int
  services          Json      // array of service IDs with prices
  add_ons           Json?     // array of add-on IDs

  // Preferences
  preferred_days    Int[]     // days of week for WEEKLY/BIWEEKLY
  preferred_week    Int?      // week of month for MONTHLY
  auto_confirm      Boolean   @default(false)

  is_active         Boolean   @default(true)
  last_generated_date DateTime?
  next_generation_date DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  customer          Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  staff             Staff     @relation(fields: [staff_id], references: [id])
  branch            Branch    @relation(fields: [branch_id], references: [id])

  @@index([customer_id, is_active])
  @@index([next_generation_date, is_active])
  @@map("recurring_appointment_templates")
}

model AppointmentReminder {
  id                String    @id @default(uuid())
  appointment_id    String
  reminder_type     NotificationType
  scheduled_at      DateTime
  sent_at           DateTime?
  is_sent           Boolean   @default(false)

  // Reminder content
  recipient         String    // email or phone number
  subject           String?
  message           String
  metadata          Json?     // additional data like template variables

  // Delivery status
  delivery_status   String?   // PENDING, SENT, DELIVERED, FAILED
  delivery_attempts Int       @default(0)
  last_attempt_at   DateTime?
  error_message     String?

  // Response tracking
  opened_at         DateTime?
  clicked_at        DateTime?
  response          String?   // CONFIRMED, CANCELLED, RESCHEDULED

  // Relations
  appointment       Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)

  @@index([appointment_id, scheduled_at])
  @@index([scheduled_at, is_sent])
  @@map("appointment_reminders")
}

model WaitlistEntry {
  id                String    @id @default(uuid())
  branch_id         String
  customer_id       String
  staff_id          String?   // preferred staff, null for any
  service_id        String

  // Preferences
  preferred_date    DateTime  @db.Date
  preferred_start_time String? // HH:MM format
  preferred_end_time String?   // HH:MM format
  flexibility_days  Int       @default(0) // +/- days from preferred date

  // Status
  status            String    @default("WAITING") // WAITING, NOTIFIED, BOOKED, EXPIRED, CANCELLED
  priority          Int       @default(0) // higher priority gets notified first

  // Notification
  notified_at       DateTime?
  notification_sent_via String? // EMAIL, SMS, PUSH
  expires_at        DateTime  // when the waitlist entry expires

  // Booking reference
  booked_appointment_id String?

  notes             String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  branch            Branch    @relation(fields: [branch_id], references: [id])
  customer          Customer  @relation(fields: [customer_id], references: [id])
  staff             Staff?    @relation(fields: [staff_id], references: [id])
  service           Service   @relation(fields: [service_id], references: [id])

  @@index([branch_id, preferred_date, status])
  @@index([customer_id, status])
  @@index([expires_at, status])
  @@map("waitlist_entries")
}

model AvailabilityOverride {
  id                String    @id @default(uuid())
  staff_id          String?   // null for branch-wide override
  branch_id         String

  // Override period
  start_datetime    DateTime
  end_datetime      DateTime

  // Override type
  is_available      Boolean   // true for extra availability, false for blocking
  reason            String?

  // Recurrence (optional)
  is_recurring      Boolean   @default(false)
  recurrence_pattern Json?    // RRULE or custom pattern

  // Audit fields
  created_at        DateTime  @default(now())
  created_by        String?
  updated_at        DateTime  @updatedAt

  // Relations
  staff             Staff?    @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  branch            Branch    @relation(fields: [branch_id], references: [id], onDelete: Cascade)

  @@index([branch_id, start_datetime, end_datetime])
  @@index([staff_id, start_datetime, end_datetime])
  @@map("availability_overrides")
}

// ==========================================
// E-COMMERCE PLATFORM EXTENSIONS
// ==========================================

// Additional enums for e-commerce
enum ProductType {
  PHYSICAL        // Physical products (hair care, beauty supplies)
  DIGITAL         // Digital products (gift cards, vouchers)
  SERVICE         // Service packages
  SUBSCRIPTION    // Monthly/recurring products
  BUNDLE          // Product bundles/kits
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  PAYMENT_FAILED
}

enum SubscriptionInterval {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  EXPIRED
}

enum RecommendationType {
  VIEWED_TOGETHER      // Products viewed together
  BOUGHT_TOGETHER      // Frequently bought together
  SIMILAR_PRODUCTS     // Similar to current product
  PERSONALIZED         // Based on user history
  TRENDING            // Currently trending
  SEASONAL            // Seasonal recommendations
}

// Enhanced Product Model for E-commerce
model ProductCategory {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  slug              String
  description       String?
  image             String?
  parent_id         String?
  display_order     Int       @default(0)
  is_active         Boolean   @default(true)
  seo_title         String?
  seo_description   String?
  seo_keywords      String[]

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  parent            ProductCategory? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children          ProductCategory[] @relation("CategoryHierarchy")
  products          EcommerceProduct[]

  @@unique([tenant_id, slug])
  @@index([tenant_id, deleted_at])
  @@index([parent_id])
  @@map("product_categories")
}

model EcommerceProduct {
  id                String    @id @default(uuid())
  tenant_id         String
  category_id       String?
  sku               String
  name              String
  slug              String
  description       String?
  short_description String?
  type              ProductType @default(PHYSICAL)
  brand             String?
  manufacturer      String?

  // Pricing
  price             Decimal   @db.Decimal(10, 2)
  compare_at_price  Decimal?  @db.Decimal(10, 2)  // original price for discounts
  cost_price        Decimal?  @db.Decimal(10, 2)
  profit_margin     Decimal?  @db.Decimal(5, 2)

  // Inventory
  track_inventory   Boolean   @default(true)
  stock_quantity    Int       @default(0)
  low_stock_threshold Int     @default(5)
  allow_backorder   Boolean   @default(false)
  weight            Decimal?  @db.Decimal(8, 2)
  dimensions        Json?     // {length, width, height}

  // SEO & Marketing
  seo_title         String?
  seo_description   String?
  seo_keywords      String[]
  tags              String[]

  // Product Status
  status            String    @default("DRAFT") // DRAFT, ACTIVE, INACTIVE, ARCHIVED
  is_featured       Boolean   @default(false)
  is_digital        Boolean   @default(false)
  requires_shipping Boolean   @default(true)

  // Media
  images            Json      @default("[]")  // array of image URLs
  videos            Json?     // array of video URLs

  // Ratings & Reviews
  average_rating    Decimal   @default(0) @db.Decimal(3, 2)
  review_count      Int       @default(0)

  // Analytics
  view_count        Int       @default(0)
  purchase_count    Int       @default(0)
  last_purchased_at DateTime?

  // Metadata
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  category          ProductCategory? @relation(fields: [category_id], references: [id])
  variants          ProductVariant[]
  cart_items        CartItem[]
  order_items       EcommerceOrderItem[]
  reviews           ProductReview[]
  recommendations   ProductRecommendation[] @relation("RecommendedProduct")
  recommended_for   ProductRecommendation[] @relation("SourceProduct")
  subscription_products SubscriptionProduct[]
  bundles           BundleItem[] @relation("BundleProduct")
  view_history      ProductView[]

  @@unique([tenant_id, sku])
  @@unique([tenant_id, slug])
  @@index([tenant_id, category_id, status])
  @@index([status, is_featured])
  @@index([deleted_at])
  @@map("ecommerce_products")
}

model ProductVariant {
  id                String    @id @default(uuid())
  product_id        String
  sku               String
  name              String
  option1_name      String?   // e.g., "Size"
  option1_value     String?   // e.g., "Large"
  option2_name      String?   // e.g., "Color"
  option2_value     String?   // e.g., "Red"
  option3_name      String?   // e.g., "Scent"
  option3_value     String?   // e.g., "Lavender"

  // Pricing
  price             Decimal?  @db.Decimal(10, 2)  // override product price
  compare_at_price  Decimal?  @db.Decimal(10, 2)
  cost_price        Decimal?  @db.Decimal(10, 2)

  // Inventory
  stock_quantity    Int       @default(0)
  weight            Decimal?  @db.Decimal(8, 2)

  // Media
  image             String?

  // Status
  is_active         Boolean   @default(true)
  position          Int       @default(0)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  product           EcommerceProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  cart_items        CartItem[]
  order_items       EcommerceOrderItem[]

  @@unique([product_id, sku])
  @@index([product_id, is_active])
  @@map("product_variants")
}

// Shopping Cart System
model Cart {
  id                String    @id @default(uuid())
  session_id        String?   // for guest users
  customer_id       String?   // for logged-in users
  tenant_id         String
  status            CartStatus @default(ACTIVE)

  // Totals
  subtotal          Decimal   @default(0) @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  shipping_amount   Decimal   @default(0) @db.Decimal(10, 2)
  total_amount      Decimal   @default(0) @db.Decimal(10, 2)

  // Abandonment tracking
  last_activity_at  DateTime  @default(now())
  abandoned_at      DateTime?
  recovery_email_sent Boolean @default(false)
  recovery_email_sent_at DateTime?

  // Conversion tracking
  converted_at      DateTime?
  order_id          String?

  // Metadata
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  customer          Customer? @relation(fields: [customer_id], references: [id])
  items             CartItem[]
  abandonment_campaigns CartAbandonmentCampaign[]

  @@index([session_id])
  @@index([customer_id, status])
  @@index([tenant_id, status])
  @@index([last_activity_at, status])
  @@map("carts")
}

model CartItem {
  id                String    @id @default(uuid())
  cart_id           String
  product_id        String
  variant_id        String?
  quantity          Int       @default(1)
  unit_price        Decimal   @db.Decimal(10, 2)
  total_price       Decimal   @db.Decimal(10, 2)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  cart              Cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product           EcommerceProduct @relation(fields: [product_id], references: [id])
  variant           ProductVariant? @relation(fields: [variant_id], references: [id])

  @@unique([cart_id, product_id, variant_id])
  @@map("cart_items")
}

// Enhanced Order System for E-commerce
model EcommerceOrder {
  id                String    @id @default(uuid())
  tenant_id         String
  customer_id       String
  order_number      String    @unique
  status            OrderStatus @default(PENDING)

  // Financial details
  subtotal          Decimal   @db.Decimal(10, 2)
  discount_amount   Decimal   @default(0) @db.Decimal(10, 2)
  tax_amount        Decimal   @default(0) @db.Decimal(10, 2)
  shipping_amount   Decimal   @default(0) @db.Decimal(10, 2)
  total_amount      Decimal   @db.Decimal(10, 2)

  // Addresses
  billing_address   Json
  shipping_address  Json?

  // Shipping
  shipping_method   String?
  tracking_number   String?
  shipped_at        DateTime?
  delivered_at      DateTime?

  // Payment
  payment_status    PaymentStatus @default(PENDING)
  payment_method    String?

  // Customer communication
  notes             String?
  customer_notes    String?

  // Fulfillment
  fulfillment_status String   @default("UNFULFILLED") // UNFULFILLED, PARTIAL, FULFILLED

  // Analytics
  source            String?   // website, mobile_app, social_media
  utm_source        String?
  utm_medium        String?
  utm_campaign      String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  customer          Customer  @relation(fields: [customer_id], references: [id])
  items             EcommerceOrderItem[]
  payments          EcommercePayment[]
  subscription      Subscription?

  @@index([tenant_id, customer_id])
  @@index([status, created_at])
  @@index([order_number])
  @@map("ecommerce_orders")
}

model EcommerceOrderItem {
  id                String    @id @default(uuid())
  order_id          String
  product_id        String
  variant_id        String?
  quantity          Int
  unit_price        Decimal   @db.Decimal(10, 2)
  total_price       Decimal   @db.Decimal(10, 2)

  // Product snapshot (in case product changes)
  product_name      String
  product_sku       String
  variant_options   Json?     // snapshot of variant options

  // Fulfillment
  fulfillment_status String   @default("UNFULFILLED")
  fulfilled_at      DateTime?

  // Relations
  order             EcommerceOrder @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product           EcommerceProduct @relation(fields: [product_id], references: [id])
  variant           ProductVariant? @relation(fields: [variant_id], references: [id])

  @@map("ecommerce_order_items")
}

model EcommercePayment {
  id                String    @id @default(uuid())
  order_id          String
  stripe_payment_intent_id String? @unique
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")
  status            PaymentStatus @default(PENDING)
  method            PaymentMethod

  // Stripe-specific fields
  stripe_charge_id  String?
  stripe_customer_id String?

  // Transaction details
  transaction_id    String?
  reference_number  String?
  gateway_response  Json?

  // Timing
  processed_at      DateTime?
  failed_at         DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  order             EcommerceOrder @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([stripe_payment_intent_id])
  @@index([order_id, status])
  @@map("ecommerce_payments")
}

// Subscription System
model Subscription {
  id                String    @id @default(uuid())
  tenant_id         String
  customer_id       String
  order_id          String?   @unique  // initial order that created subscription

  // Stripe integration
  stripe_subscription_id String? @unique
  stripe_customer_id String?

  // Subscription details
  status            SubscriptionStatus @default(ACTIVE)
  interval          SubscriptionInterval @default(MONTHLY)
  interval_count    Int       @default(1)  // e.g., every 2 months

  // Pricing
  price_per_cycle   Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")

  // Billing cycle
  current_period_start DateTime
  current_period_end DateTime
  trial_start       DateTime?
  trial_end         DateTime?

  // Lifecycle
  started_at        DateTime  @default(now())
  ended_at          DateTime?
  cancelled_at      DateTime?
  cancellation_reason String?

  // Pause functionality
  paused_at         DateTime?
  pause_reason      String?
  pause_resumes_at  DateTime?

  // Analytics
  total_cycles      Int       @default(0)
  successful_payments Int     @default(0)
  failed_payments   Int       @default(0)
  total_revenue     Decimal   @default(0) @db.Decimal(10, 2)

  // Metadata
  metadata          Json      @default("{}")

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  customer          Customer  @relation(fields: [customer_id], references: [id])
  initial_order     EcommerceOrder? @relation(fields: [order_id], references: [id])
  products          SubscriptionProduct[]
  billing_history   SubscriptionBilling[]

  @@index([tenant_id, customer_id])
  @@index([status, current_period_end])
  @@index([stripe_subscription_id])
  @@map("subscriptions")
}

model SubscriptionProduct {
  id                String    @id @default(uuid())
  subscription_id   String
  product_id        String
  quantity          Int       @default(1)
  unit_price        Decimal   @db.Decimal(10, 2)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  subscription      Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  product           EcommerceProduct @relation(fields: [product_id], references: [id])

  @@unique([subscription_id, product_id])
  @@map("subscription_products")
}

model SubscriptionBilling {
  id                String    @id @default(uuid())
  subscription_id   String
  billing_date      DateTime
  amount            Decimal   @db.Decimal(10, 2)
  status            String    // SUCCESS, FAILED, PENDING, RETRYING
  stripe_invoice_id String?

  // Retry logic
  attempt_count     Int       @default(0)
  next_retry_at     DateTime?

  // Payment details
  paid_at           DateTime?
  failed_at         DateTime?
  failure_reason    String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  subscription      Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@index([subscription_id, billing_date])
  @@index([status, next_retry_at])
  @@map("subscription_billing")
}

// Product Bundles
model ProductBundle {
  id                String    @id @default(uuid())
  tenant_id         String
  name              String
  slug              String
  description       String?

  // Pricing
  price             Decimal   @db.Decimal(10, 2)
  compare_at_price  Decimal?  @db.Decimal(10, 2)
  discount_type     String?   // PERCENTAGE, FIXED_AMOUNT
  discount_value    Decimal?  @db.Decimal(10, 2)

  // Status
  is_active         Boolean   @default(true)
  is_featured       Boolean   @default(false)

  // Media
  image             String?

  // SEO
  seo_title         String?
  seo_description   String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  items             BundleItem[]

  @@unique([tenant_id, slug])
  @@index([tenant_id, is_active])
  @@map("product_bundles")
}

model BundleItem {
  id                String    @id @default(uuid())
  bundle_id         String
  product_id        String
  quantity          Int       @default(1)
  display_order     Int       @default(0)

  // Relations
  bundle            ProductBundle @relation(fields: [bundle_id], references: [id], onDelete: Cascade)
  product           EcommerceProduct @relation("BundleProduct", fields: [product_id], references: [id])

  @@unique([bundle_id, product_id])
  @@map("bundle_items")
}

// Product Reviews
model ProductReview {
  id                String    @id @default(uuid())
  product_id        String
  customer_id       String
  order_id          String?   // reference to order if verified purchase

  // Review content
  rating            Int       // 1-5 stars
  title             String?
  review_text       String?

  // Media
  images            Json?     // array of image URLs
  videos            Json?     // array of video URLs

  // Verification
  is_verified_purchase Boolean @default(false)

  // Moderation
  is_approved       Boolean   @default(false)
  is_featured       Boolean   @default(false)
  moderated_at      DateTime?
  moderated_by      String?

  // Helpfulness
  helpful_count     Int       @default(0)
  not_helpful_count Int       @default(0)

  // Response
  response_text     String?
  responded_at      DateTime?
  responded_by      String?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?

  // Relations
  product           EcommerceProduct @relation(fields: [product_id], references: [id])
  customer          Customer @relation(fields: [customer_id], references: [id])

  @@index([product_id, is_approved])
  @@index([customer_id])
  @@index([rating, is_approved])
  @@map("product_reviews")
}

// Recommendation Engine
model ProductRecommendation {
  id                String    @id @default(uuid())
  tenant_id         String
  source_product_id String?   // product that triggers recommendation
  recommended_product_id String
  customer_id       String?   // for personalized recommendations

  // Recommendation details
  type              RecommendationType
  confidence_score  Decimal   @db.Decimal(5, 4)  // 0.0001 to 1.0000
  reason            String?   // explanation for recommendation

  // Performance tracking
  impression_count  Int       @default(0)
  click_count       Int       @default(0)
  conversion_count  Int       @default(0)
  revenue_generated Decimal   @default(0) @db.Decimal(10, 2)

  // Validity
  is_active         Boolean   @default(true)
  expires_at        DateTime?

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  source_product    EcommerceProduct? @relation("SourceProduct", fields: [source_product_id], references: [id])
  recommended_product EcommerceProduct @relation("RecommendedProduct", fields: [recommended_product_id], references: [id])
  customer          Customer? @relation(fields: [customer_id], references: [id])

  @@index([tenant_id, type, is_active])
  @@index([source_product_id, type])
  @@index([customer_id, type])
  @@map("product_recommendations")
}

// Analytics & Tracking
model ProductView {
  id                String    @id @default(uuid())
  product_id        String
  customer_id       String?
  session_id        String?

  // Context
  page_url          String?
  referrer_url      String?
  user_agent        String?
  ip_address        String?

  // Geographic data
  country           String?
  region            String?
  city              String?

  // Device info
  device_type       String?   // mobile, tablet, desktop
  browser           String?
  operating_system  String?

  // Timing
  view_duration     Int?      // seconds spent viewing

  // Audit fields
  created_at        DateTime  @default(now())

  // Relations
  product           EcommerceProduct @relation(fields: [product_id], references: [id])
  customer          Customer? @relation(fields: [customer_id], references: [id])

  @@index([product_id, created_at])
  @@index([customer_id, created_at])
  @@index([session_id])
  @@map("product_views")
}

// Abandoned Cart Recovery
model CartAbandonmentCampaign {
  id                String    @id @default(uuid())
  cart_id           String

  // Campaign details
  email_subject     String
  email_content     String
  discount_code     String?
  discount_percentage Decimal? @db.Decimal(5, 2)

  // Scheduling
  scheduled_at      DateTime
  sent_at           DateTime?

  // Performance
  opened_at         DateTime?
  clicked_at        DateTime?
  recovered_at      DateTime?  // cart was recovered/converted

  // Status
  status            String    @default("SCHEDULED") // SCHEDULED, SENT, OPENED, CLICKED, RECOVERED, FAILED

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  cart              Cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)

  @@index([cart_id, status])
  @@index([scheduled_at, status])
  @@map("cart_abandonment_campaigns")
}

// Analytics Dashboard Data
model AnalyticsSnapshot {
  id                String    @id @default(uuid())
  tenant_id         String
  date              DateTime  @db.Date
  metric_type       String    // DAILY, WEEKLY, MONTHLY

  // Sales metrics
  total_revenue     Decimal   @default(0) @db.Decimal(12, 2)
  total_orders      Int       @default(0)
  average_order_value Decimal @default(0) @db.Decimal(10, 2)
  conversion_rate   Decimal   @default(0) @db.Decimal(5, 4)

  // Traffic metrics
  unique_visitors   Int       @default(0)
  page_views        Int       @default(0)
  bounce_rate       Decimal   @default(0) @db.Decimal(5, 4)

  // Product metrics
  best_selling_products Json  @default("[]")
  products_viewed   Int       @default(0)
  cart_abandonment_rate Decimal @default(0) @db.Decimal(5, 4)

  // Customer metrics
  new_customers     Int       @default(0)
  returning_customers Int     @default(0)
  customer_lifetime_value Decimal @default(0) @db.Decimal(10, 2)

  // Subscription metrics
  new_subscriptions Int       @default(0)
  cancelled_subscriptions Int @default(0)
  subscription_revenue Decimal @default(0) @db.Decimal(12, 2)
  churn_rate        Decimal   @default(0) @db.Decimal(5, 4)

  // Marketing metrics
  email_campaigns_sent Int    @default(0)
  email_open_rate   Decimal   @default(0) @db.Decimal(5, 4)
  email_click_rate  Decimal   @default(0) @db.Decimal(5, 4)

  // Audit fields
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@unique([tenant_id, date, metric_type])
  @@index([tenant_id, date])
  @@map("analytics_snapshots")
}

// Search & Discovery
model SearchQuery {
  id                String    @id @default(uuid())
  tenant_id         String
  customer_id       String?
  session_id        String?

  // Search details
  query             String
  results_count     Int       @default(0)
  clicked_result_id String?   // product ID that was clicked
  click_position    Int?      // position of clicked result

  // Context
  page_url          String?
  filters_applied   Json?     // applied filters
  sort_order        String?

  // Performance
  search_duration_ms Int?     // time to execute search

  // Audit fields
  created_at        DateTime  @default(now())

  // Relations
  tenant            Tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  customer          Customer? @relation(fields: [customer_id], references: [id])

  @@index([tenant_id, query])
  @@index([customer_id, created_at])
  @@map("search_queries")
}

