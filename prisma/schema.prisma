generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For local development without PostgreSQL:
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

// User and Authentication
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role           @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  appointments  Appointment[]  @relation("CustomerAppointments")
  staffAppointments Appointment[] @relation("StaffAppointments")
  reviews       Review[]
  loyaltyPoints LoyaltyPoints?
  cart          Cart?
  orders        Order[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
  CUSTOMER
}

// Services
model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int      // in minutes
  category    String
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@unique([name, category])
}

// Appointments
model Appointment {
  id         String   @id @default(cuid())
  customerId String
  staffId    String
  serviceId  String
  date       DateTime
  status     AppointmentStatus @default(PENDING)
  notes      String?
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer   User     @relation("CustomerAppointments", fields: [customerId], references: [id])
  staff      User     @relation("StaffAppointments", fields: [staffId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  payment    Payment?
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Products for Shop
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  category    String
  stock       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@unique([name, category])
}

// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// Orders
model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  shippingAddress String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payment       Payment?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// Payments
model Payment {
  id            String   @id @default(cuid())
  appointmentId String?  @unique
  orderId       String?  @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        String
  stripePaymentId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  order         Order?       @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

// Loyalty Program
model LoyaltyPoints {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  tier      LoyaltyTier @default(BRONZE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}